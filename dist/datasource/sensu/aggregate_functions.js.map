{"version":3,"file":"aggregate_functions.js","sourceRoot":"src/","sources":["datasource/sensu/aggregate_functions.ts"],"names":[],"mappings":";;;;IAKA,0BAA0B,MAAM,EAAE,cAAc;QAE9C,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,YAAY,GAAG,aAAa,CAAC;QACjC,IAAI,eAAe,GAAG,IAAI,CAAC;QAE3B,IAAI,cAAc,CAAC,MAAM,EAAE;YACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC9C,eAAe,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;gBACpC,YAAY,GAAG,cAAc,GAAG,eAAe,CAAC;gBAChD,QAAQ,MAAM,CAAC,aAAa,EAAE;oBAC5B,KAAK,QAAQ;wBACX,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,SAAS,CAAC;wBAC5D,MAAM;oBACR,KAAK,SAAS;wBACZ,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,UAAU,CAAC;wBAC7D,MAAM;oBACR,KAAK,MAAM;wBACT,YAAY,GAAG,cAAc,GAAG,eAAe,CAAC;wBAChD,MAAM;oBACR,KAAK,kBAAkB;wBACrB,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,mBAAmB,CAAC;wBACtE,MAAM;oBACR,KAAK,YAAY;wBACf,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,aAAa,CAAC;wBAChE,MAAM;oBACR,KAAK,iBAAiB;wBACpB,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,kBAAkB,CAAC;wBACrE,MAAM;oBACR,KAAK,iBAAiB;wBACpB,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,kBAAkB,CAAC;wBACrE,MAAM;iBACT;gBACD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACzB;SACF;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACzB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;IAOD,uCAAuC,OAAO,EAAE,SAAS;QACvD,IAAI,QAAQ,GAAG,6BAAoB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAKxD,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YACtC,IAAI,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC/B,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;YACnB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAChC;QAED,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,IAAI,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEnC,IAAI,WAAW,CAAC,MAAM,KAAK,SAAS,EAAE;gBAGpC,IAAI,SAAS,GAAG,OAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAC3C,QAAQ,SAAS,EAAE;oBACjB,KAAK,QAAQ;wBAEX,OAAO,GAAG,mCAAmC,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;wBACpE,MAAM;oBACR,KAAK,QAAQ;wBAEX,OAAO,GAAG,qCAAqC,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;wBACtE,MAAM;iBACT;gBACD,SAAS;aACV;YAED,IAAI,WAAW,CAAC,OAAO,KAAK,SAAS,EAAE;gBACrC,OAAO,GAAG,qCAAqC,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;gBACtE,SAAS;aACV;YAED,IAAI,WAAW,CAAC,OAAO,KAAK,SAAS,EAAE;gBACrC,OAAO,GAAG,sCAAsC,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;gBACvE,SAAS;aACV;YAGD,IAAI,UAAU,GAAG,EAAE,CAAC;YAEpB,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YACvC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAC/B,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;YAEpC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC;SACvC;QACD,IAAI,OAAO,KAAK,IAAI,EAAE;YAEpB,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC;SACzB;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;;IAED,gDAAgD,OAAO,EAAE,OAAO;QAC9D,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACvC,IAAI,OAAO,KAAK,IAAI,EAAE;YAEpB,OAAO,GAAG,EAAE,CAAC;SACd;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,SAAS,GAAG;gBACd,MAAM,EAAE,OAAO,CAAC,KAAK;gBACrB,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,UAAU,EAAE;oBACV,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC;iBAC5B;aACF,CAAC;YACF,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACzB;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAQD,+CAA+C,OAAO,EAAE,OAAO;QAC7D,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACvC,IAAI,OAAO,KAAK,IAAI,EAAE;YAEpB,OAAO,GAAG,EAAE,CAAC;SACd;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI,SAAS,GAAG;gBACd,MAAM,EAAE,OAAO,CAAC,IAAI;gBACpB,UAAU,EAAE;oBACV,CAAC,UAAU,EAAE,SAAS,CAAC;iBACxB;aACF,CAAC;YACF,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACzB;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IASD,+CAA+C,OAAO,EAAE,OAAO;QAC7D,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACvC,IAAI,OAAO,KAAK,IAAI,EAAE;YAEpB,OAAO,GAAG,EAAE,CAAC;SACd;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,UAAU,GAAG;gBACf,MAAM,EAAE,OAAO,CAAC,IAAI;gBACpB,UAAU,EAAE;oBACV,CAAC,SAAS,EAAE,SAAS,CAAC;iBACvB;aACF,CAAC;YACF,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAcD,6CAA6C,OAAO,EAAE,OAAO;QAC3D,IAAI,OAAO,KAAK,IAAI,EAAE;YAEpB,OAAO,GAAG,EAAE,CAAC;SACd;QACD,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACvC,IAAI,IAAI,GAAG;YACT,MAAM,EAAE,QAAQ;YAChB,UAAU,EAAE;gBACV,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC;aAC5B;SACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,GAAG;YACL,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE;gBACV,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC;aAC7B;SACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,GAAG;YACL,MAAM,EAAE,UAAU;YAClB,UAAU,EAAE;gBACV,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,SAAS,CAAC;aACtC;SACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,GAAG;YACL,MAAM,EAAE,IAAI;YACZ,UAAU,EAAE;gBACV,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,SAAS,CAAC;aAChC;SACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,GAAG;YACL,MAAM,EAAE,OAAO;YACf,UAAU,EAAE;gBACV,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC;aACnC;SACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,GAAG;YACL,MAAM,EAAE,OAAO;YACf,UAAU,EAAE;gBACV,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC;aACnC;SACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,GAAG;YACL,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE;gBACV,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC;aACrC;SACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,GAAG;YACL,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE;gBACV,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC;aACrC;SACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnB,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,0CAA0C,IAAI,EAAE,OAAO;QACrD,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACvC,IAAI,OAAO,KAAK,IAAI,EAAE;YAEpB,OAAO,GAAG,EAAE,CAAC;SACd;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,UAAU,GAAG;gBACf,MAAM,EAAE,IAAI,CAAC,IAAI;gBACjB,UAAU,EAAE;oBACV,CAAC,SAAS,EAAE,SAAS,CAAC;iBACvB;aACF,CAAC;YACF,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IASD,iCAAiC,OAAO,EAAE,SAAS;QACjD,IAAI,QAAQ,GAAG,6BAAoB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACxD,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;SAC7C;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,IAAI,GAAG;gBACT,MAAM,EAAE,IAAI,CAAC,IAAI;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,cAAc,EAAE,aAAa;aAC9B,CAAC;YACF,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;SACpB;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;;;;;;;;;QASD,CAAC","sourcesContent":["/**\n *\n */\nimport { getResponseForTarget } from \"./common\";\n\nfunction getAggregateURIs(target, aggregateNames) {\n  // https://sensuapp.org/docs/0.28/api/aggregates-api.html\n  var uris = [];\n  var dimensionURI = \"/aggregates\";\n  var anAggregateName = null;\n  // name, name/clients, name/checks, name/results/severity\n  if (aggregateNames.length) {\n    for (let i = 0; i < aggregateNames.length; i++) {\n      anAggregateName = aggregateNames[i];\n      dimensionURI = \"/aggregates/\" + anAggregateName;\n      switch (target.aggregateMode) {\n        case \"checks\":\n          dimensionURI = \"/aggregates/\" + anAggregateName + \"/checks\";\n          break;\n        case \"clients\":\n          dimensionURI = \"/aggregates/\" + anAggregateName + \"/clients\";\n          break;\n        case \"list\":\n          dimensionURI = \"/aggregates/\" + anAggregateName;\n          break;\n        case \"results_critical\":\n          dimensionURI = \"/aggregates/\" + anAggregateName + \"/results/critical\";\n          break;\n        case \"results_ok\":\n          dimensionURI = \"/aggregates/\" + anAggregateName + \"/results/ok\";\n          break;\n        case \"results_unknown\":\n          dimensionURI = \"/aggregates/\" + anAggregateName + \"/results/unknown\";\n          break;\n        case \"results_warning\":\n          dimensionURI = \"/aggregates/\" + anAggregateName + \"/results/warning\";\n          break;\n      }\n      uris.push(dimensionURI);\n    }\n  }\n  if (uris.length === 0) {\n    uris.push(dimensionURI);\n  }\n  return uris;\n}\n\n/**\n * [convertAggregatesToDataPoints description]\n * @param  {[type]} response [description]\n * @return {[type]}        [description]\n */\nfunction convertAggregatesToDataPoints(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n  // the result has no \"datapoints\", need to create it based on the check data\n\n  // when we have a checkname and an clientName, the response is different, the\n  // data is not an array, but contains the same information, recreate and push\n  if (response.data.length === undefined) {\n    var singleData = response.data;\n    response.data = [];\n    response.data.push(singleData);\n  }\n  // storage for new data series constructed by aggregate responses\n  var newData = null;\n  for (var i = 0; i < response.data.length; i++) {\n    var anAggregate = response.data[i];\n    // checks is defined when the aggregate mode is either \"Clients\" or \"List\"\n    if (anAggregate.checks !== undefined) {\n      // create a new block of datapoints for each aggregate result json entry\n      //\n      var checkType = typeof(anAggregate.checks);\n      switch (checkType) {\n        case \"number\":\n          // checksType is a number, which is an aggregate list response\n          newData = convertEventDataToAggregateModeList(anAggregate, newData);\n          break;\n        case \"object\":\n          // checkType is an object, which is an aggregate clients response\n          newData = convertEventDataToAggregateModeClient(anAggregate, newData);\n          break;\n      }\n      continue;\n    }\n    // clients is defined when the aggregate mode is \"Checks\"\n    if (anAggregate.clients !== undefined) {\n      newData = convertEventDataToAggregateModeChecks(anAggregate, newData);\n      continue;\n    }\n    // summary is defined when the aggregate mode is \"Results OK/WARNING/CRITICAL/UNKNOWN\"\n    if (anAggregate.summary !== undefined) {\n      newData = convertEventDataToAggregateModeResults(anAggregate, newData);\n      continue;\n    }\n\n    // this is a simple aggregate response (no mode)\n    var datapoints = [];\n    // timestamp is the query now (just use now)\n    var timestamp = Math.floor(Date.now());\n    datapoints[0] = [0, timestamp];\n    anAggregate.datapoints = datapoints;\n    // set the target to be the name of the aggregate\n    anAggregate.target = anAggregate.name;\n  }\n  if (newData !== null) {\n    // overwrite the old data field with the new expanded set\n    response.data = newData;\n  }\n  return response;\n}\n\nfunction convertEventDataToAggregateModeResults(anEvent, dataSet) {\n  var timestamp = Math.floor(Date.now());\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  // iterate over the checks\n  for (var i = 0; i < anEvent.summary.length; i++) {\n    var aSummary = anEvent.summary[i];\n    var checkData = {\n      target: anEvent.check,\n      clients: aSummary.clients,\n      datapoints: [\n        [aSummary.total, timestamp]\n      ]\n    };\n    dataSet.push(checkData);\n  }\n  return dataSet;\n}\n// An aggregate checks result has the format\n// {\n//    clients: [\n//      clientName\n//    ],\n//    name: checkName\n// }\nfunction convertEventDataToAggregateModeChecks(anEvent, dataSet) {\n  var timestamp = Math.floor(Date.now());\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  // iterate over the checks\n  for (var i = 0; i < anEvent.clients.length; i++) {\n    var clientName = anEvent.clients[i];\n    var checkData = {\n      target: anEvent.name,\n      datapoints: [\n        [clientName, timestamp]\n      ]\n    };\n    dataSet.push(checkData);\n  }\n  return dataSet;\n}\n\n// An aggregate clients result has the format\n// {\n//    checks: [\n//      checkName\n//    ],\n//    name: clientName\n// }\nfunction convertEventDataToAggregateModeClient(anEvent, dataSet) {\n  var timestamp = Math.floor(Date.now());\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  // iterate over the checks\n  for (var i = 0; i < anEvent.checks.length; i++) {\n    var checkName = anEvent.checks[i];\n    var clientData = {\n      target: anEvent.name,\n      datapoints: [\n        [checkName, timestamp]\n      ]\n    };\n    dataSet.push(clientData);\n  }\n  return dataSet;\n}\n// An aggregate list result has the format\n// {\n//   checks: int,\n//   clients: int,\n//   results: {\n//    critical: int,\n//    ok: int,\n//    stale: int,\n//    total: int,\n//    unknown: int,\n//    warning: int\n//   }\n// }\nfunction convertEventDataToAggregateModeList(anEvent, dataSet) {\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  var timestamp = Math.floor(Date.now());\n  var item = {\n    target: \"checks\",\n    datapoints: [\n      [anEvent.checks, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: \"clients\",\n    datapoints: [\n      [anEvent.clients, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: \"critical\",\n    datapoints: [\n      [anEvent.results.critical, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: \"ok\",\n    datapoints: [\n      [anEvent.results.ok, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: \"stale\",\n    datapoints: [\n      [anEvent.results.stale, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: \"total\",\n    datapoints: [\n      [anEvent.results.total, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: \"unknown\",\n    datapoints: [\n      [anEvent.results.unknown, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: \"warning\",\n    datapoints: [\n      [anEvent.results.warning, timestamp]\n    ]\n  };\n  dataSet.push(item);\n\n  return dataSet;\n}\n\nfunction convertToAggregateModeClientJSON(data, dataSet) {\n  var timestamp = Math.floor(Date.now());\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  // iterate over the checks\n  for (var i = 0; i < data.checks.length; i++) {\n    var checkName = data.checks[i];\n    var clientData = {\n      target: data.name,\n      datapoints: [\n        [checkName, timestamp]\n      ]\n    };\n    dataSet.push(clientData);\n  }\n  return dataSet;\n}\n\n\n/**\n * [convertAggregatesToJSON description]\n * @param  {[type]} response [description]\n * @param  {[type]} aTarget  [description]\n * @return {[type]}          [description]\n */\nfunction convertAggregatesToJSON(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n  var aggregateName = \"ALL\";\n  if (aTarget.dimensions.length > 0) {\n    aggregateName = aTarget.dimensions[0].value;\n  }\n  for (var i = 0; i < response.data.length; i++) {\n    var item = response.data[i];\n    var datapoints = [];\n    var data = {\n      client: item.name,\n      checks: item.checks,\n      aggregate_name: aggregateName,\n    };\n    datapoints.push(data);\n    item.datapoints = datapoints;\n    item.type = \"docs\";\n  }\n  return response;\n}\n\n\n\nexport {\n  getAggregateURIs,\n  convertAggregatesToDataPoints,\n  convertAggregatesToJSON\n};\n"]}