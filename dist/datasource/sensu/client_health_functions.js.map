{"version":3,"file":"client_health_functions.js","sourceRoot":"src/","sources":["datasource/sensu/client_health_functions.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n  Client Health\n\n  Health is determined by taking the worst of the non-silenced results for a client\n\n  The \"unknown\" state can optionally be used as the worst state\n  Specifically:\n    /results/:client\n        status field is inspected for:\n        0 = OK\n        1 = WARNING\n        2 = CRITICAL\n        3 = UNKNOWN\n    /events/:client\n        status field is inspected\n\n */\nimport { getResponseForTarget } from \"./common\";\n\n/**\n * [getClientHealthURIs description]\n * @param  {[type]} clientNames [description]\n * @return {[type]}             [description]\n */\nfunction getClientHealthURIs(clientNames) {\n  var uris = [];\n  // look for clientName in dimensions\n  if (clientNames.length) {\n    for (let i = 0; i < clientNames.length; i++) {\n      var aClientName = clientNames[i];\n      var resultsURI = \"/results/\" + aClientName;\n      uris.push(resultsURI);\n      var eventsURI = \"/events/\" + aClientName;\n      uris.push(eventsURI);\n    }\n  }\n  if (uris.length === 0) {\n    uris.push(\"/results\");\n    uris.push(\"/events\");\n  }\n  return uris;\n}\n\n/**\n * [convertClientHealthToJSON description]\n * @param  {[type]} target   [description]\n * @param  {[type]} response [description]\n * @return {[type]}          [description]\n */\nfunction convertClientHealthToJSON(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n\n  var filteredData = [];\n  for (var i = 0; i < response.data.length; i++) {\n    var anEvent = response.data[i];\n    var datapoints = [];\n    //console.log(JSON.stringify(anEvent));\n    if (anEvent.check.issued !== undefined) {\n      var data = {\n        timestamp: (anEvent.check.issued * 1000),\n        check_name: anEvent.check.name,\n        client: anEvent.client,\n        check: anEvent.check,\n        occurrences: anEvent.occurrences,\n        occurrences_watermark: anEvent.occurrences_watermark,\n        action: anEvent.action,\n        id: anEvent.id,\n        last_state_change: (anEvent.last_state_change * 1000),\n        last_ok: (anEvent.last_ok * 1000),\n        silenced: anEvent.silenced,\n        silenced_by: anEvent.silenced_by\n      };\n      try {\n        data.check.issued = data.check.issued * 1000;\n        data.check.executed = data.check.executed * 1000;\n      } catch (err) {\n        // do nothing\n      }\n      datapoints.push(data);\n      anEvent.datapoints = datapoints;\n      delete anEvent.check;\n      delete anEvent.client;\n      anEvent.type = \"docs\";\n      if (!anEvent.silenced) {\n        filteredData.push(anEvent);\n      }\n      if (anEvent.silenced && !aTarget.hideSilencedEvents) {\n        filteredData.push(anEvent);\n      }\n    }\n  }\n  response.data = filteredData;\n  //var str = JSON.stringify(response, null, 2);\n  //console.log(str);\n  return response;\n}\n\n// TODO\n//  This needs to return health of individual clients\nfunction convertClientHealthMetricsToJSON(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n}\n\nexport {\n  getClientHealthURIs,\n  convertClientHealthToJSON,\n  convertClientHealthMetricsToJSON\n};\n"]}