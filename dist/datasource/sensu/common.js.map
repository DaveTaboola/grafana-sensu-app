{"version":3,"file":"common.js","sourceRoot":"src/","sources":["datasource/sensu/common.ts"],"names":[],"mappings":"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","sourcesContent":["function getResponseForTarget(aTarget, responses) {\n  // find a response that matches the target\n  var response = {\n    data: []\n  };\n  for (let i = 0; i < responses.data.length; i++) {\n    if (responses.data[i].target === aTarget) {\n      // this is the response to convert\n      response.data = responses.data[i].response.data;\n      break;\n    }\n  }\n  return response;\n}\n\nfunction getClientsWithFilter(aTarget, response) {\n  var arrClientNames = [];\n  for (let i = 0; i < aTarget.filters.length; i++) {\n    var aFilter = aTarget.filters[i];\n    switch (aFilter.filterType) {\n      case \"field\":\n        for (let j = 0; j < response.data.length; j++) {\n          if (response.data[j].hasOwnProperty(aFilter.filterFieldName)) {\n            let fieldVal = response.data[j][aFilter.filterFieldName];\n            if (fieldVal === aFilter.filterFieldValueReplaced) {\n              // matched field\n              if (arrClientNames.indexOf(response.data[j].name) === -1) {\n                arrClientNames.push(response.data[j].name);\n              }\n            }\n          }\n        }\n        break;\n      case \"fetch\":\n        // iterate over all of the data\n        for (let j = 0; j < response.data.length; j++) {\n          if (aFilter.value === response.data[j].name) {\n            // add to list of tracked names\n            if (arrClientNames.indexOf(response.data[j].name) === -1) {\n              arrClientNames.push(response.data[j].name);\n            }\n          }\n        }\n        break;\n      case \"regex\":\n        // make sure the regex is valid\n        try {\n          var flags = aFilter.filterRegexFlags;\n          var re = new RegExp(aFilter.filterRegex, flags);\n          // iterate over all of the data\n          for (let j = 0; j < response.data.length; j++) {\n            if (re.test(response.data[j].name)) {\n              // add to list of tracked names\n              if (arrClientNames.indexOf(response.data[j].name) === -1) {\n                arrClientNames.push(response.data[j].name);\n              }\n            }\n          }\n        } catch (err) {\n          aFilter.filterMessage = \"Invalid Regular Expression\";\n        }\n        break;\n    }\n  }\n  return arrClientNames;\n}\n\nexport {\n  getResponseForTarget,\n  getClientsWithFilter\n};\n"]}