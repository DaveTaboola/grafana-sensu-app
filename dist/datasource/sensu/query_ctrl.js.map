{"version":3,"file":"query_ctrl.js","sourceRoot":"src/","sources":["datasource/sensu/query_ctrl.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport angular from \"angular\";\nimport _ from \"lodash\";\nimport { QueryCtrl } from \"app/plugins/sdk\";\nimport \"./css/query-editor.css!\";\n\nexport class SensuDatasourceQueryCtrl extends QueryCtrl {\n  static templateUrl = \"datasource/sensu/partials/query.editor.html\";\n\n  scope: any;\n  uiSegmentSrv: any;\n  templateSrv: any;\n  sourceTypes: any[];\n  dimensionTypes: any;\n  filterTypes: any;\n  aggregateModes: any;\n  clientQueryModes: any;\n  eventMetricModes: any;\n\n  constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n    super($scope, $injector);\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n    // source types for the popdown\n    this.sourceTypes = [\n      {\n        text: \"Aggregates\",\n        value: \"aggregates\",\n      },\n      {\n        text: \"Aggregates as JSON\",\n        value: \"aggregates_json\",\n      },\n      {\n        text: \"Check Subscriptions\",\n        value: \"check_subscriptions\",\n      },\n      {\n        text: \"Clients\",\n        value: \"clients\",\n      },\n      {\n        text: \"Clients as JSON\",\n        value: \"clients_json\",\n      },\n      {\n        text: \"Client Health as JSON\",\n        value: \"client_health_json\",\n      },\n      {\n        text: \"Client History\",\n        value: \"client_history\",\n      },\n      {\n        text: \"Events\",\n        value: \"events\",\n      },\n      {\n        text: \"Events as JSON\",\n        value: \"events_json\",\n      },\n      {\n        text: \"Event Metrics\",\n        value: \"event_metrics\",\n      },\n      {\n        text: \"Event Metrics JSON\",\n        value: \"event_metrics_json\",\n      },\n      {\n        text: \"Results as JSON\",\n        value: \"results_json\",\n      },\n      {\n        text: \"Results as Table\",\n        value: \"results_table\",\n      },\n      {\n        text: \"Sensu Health\",\n        value: \"sensu_health_json\",\n      },\n      {\n        text: \"Silenced Entries\",\n        value: \"silenced_entries_json\",\n      },\n      {\n        text: \"Stashes\",\n        value: \"stashes_json\",\n      }\n    ];\n\n    // Each source type have different dimensions\n    //   //    name - name of check\n      //    aggregate - name of aggregate\n      //    type (metric|check)\n      //    source - JIT client\n    this.dimensionTypes = {\n      aggregates: [\n      {\n        text: \"Aggregate Name\",\n        value: \"aggregateName\",\n      }],\n      aggregates_json: [\n      {\n        text: \"Aggregate Name\",\n        value: \"aggregateName\",\n      }],\n      check_subscriptions: [\n      {\n        text: \"Aggregate Name\",\n        value: \"aggregateName\",\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\",\n      },\n      {\n        text: \"Check Type\",\n        value: \"checkType\",\n      },\n      {\n        text: \"Source (JIT Client)\",\n        value: \"sourceName\",\n      }],\n      clients: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\",\n      }],\n      client_health_json: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      }],\n      client_history: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      }],\n      clients_json: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\",\n      }],\n      events: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\"\n      }],\n      events_json: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\"\n      }],\n      event_metrics: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\"\n      }],\n      event_metrics_json: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\"\n      }],\n      results_json: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\",\n      }],\n      results_table: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\",\n      }],\n      sensu_health_json: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\",\n      }],\n      silenced_entries_json: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\",\n      }],\n      stashes_json: [\n      {\n        text: \"Client Name\",\n        value: \"clientName\"\n      },\n      {\n        text: \"Check Name\",\n        value: \"checkName\",\n      }]\n    };\n\n    // same\n    this.filterTypes = {\n      aggregates: [\n        {\n          text: \"Number of Checks\",\n          value: \"checks\",\n          type: \"value\"\n        },\n        {\n          text: \"Number of Clients\",\n          value: \"clients\",\n          type: \"value\"\n        },\n        {\n          text: \"State Critical\",\n          value: \"critical\",\n          type: \"value\"\n        },\n        {\n          text: \"State OK\",\n          value: \"ok\",\n          type: \"value\"\n        },\n        {\n          text: \"State Stale\",\n          value: \"stale\",\n          type: \"value\"\n        },\n        {\n          text: \"State Unknown\",\n          value: \"unknown\",\n          type: \"value\"\n        },\n        {\n          text: \"State Warning\",\n          value: \"warning\",\n          type: \"value\"\n        },\n        {\n          text: \"Total Checks\",\n          value: \"total\",\n          type: \"value\"\n        }\n      ],\n      client_health_json: [\n          {\n            text: \"Client Name\",\n            value: \"fetch\"\n          },\n          {\n            text: \"Client Name RegEx\",\n            value: \"regex\"\n          }\n      ],\n      clients: [\n          {\n            text: \"Client Name\",\n            value: \"fetch\"\n          },\n          {\n            text: \"Client Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Field\",\n            value: \"field\"\n          }\n      ],\n      clients_json: [\n          {\n            text: \"Client Name\",\n            value: \"fetch\"\n          },\n          {\n            text: \"Client Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Field\",\n            value: \"field\"\n          }\n      ],\n      events: [\n          {\n            text: \"Client Name\",\n            value: \"fetch\"\n          },\n          {\n            text: \"Client Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Check Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Field\",\n            value: \"field\"\n          }\n      ],\n      events_json: [\n          {\n            text: \"Client Name\",\n            value: \"fetch\"\n          },\n          {\n            text: \"Client Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Check Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Field\",\n            value: \"field\"\n          }\n      ],\n      event_metrics: [\n          {\n            text: \"Client Name\",\n            value: \"fetch\"\n          },\n          {\n            text: \"Client Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Check Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Field\",\n            value: \"field\"\n          }\n      ],\n      event_metrics_json: [\n          {\n            text: \"Client Name\",\n            value: \"fetch\"\n          },\n          {\n            text: \"Client Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Check Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Field\",\n            value: \"field\"\n          }\n      ],\n      results_json: [\n          {\n            text: \"Client Name\",\n            value: \"fetch\"\n          },\n          {\n            text: \"Client Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Check Name RegEx\",\n            value: \"regex\"\n          },\n          {\n            text: \"Field\",\n            value: \"field\"\n          }\n      ]\n    };\n\n    this.aggregateModes = [\n      {\n        text: \"List\",\n        value: \"list\"\n      },\n      {\n        text: \"Clients\",\n        value: \"clients\"\n      },\n      {\n        text: \"Checks\",\n        value: \"checks\"\n      },\n      {\n        text: \"Results Critical\",\n        value: \"results_critical\"\n      },\n      {\n        text: \"Results OK\",\n        value: \"results_ok\"\n      },\n      {\n        text: \"Results Unknown\",\n        value: \"results_unknown\"\n      },\n      {\n        text: \"Results Warning\",\n        value: \"results_warning\"\n      },\n    ];\n\n    this.clientQueryModes = [\n      {\n        text: \"List\",\n        value: \"list\"\n      },\n      {\n        text: \"Count\",\n        value: \"count\"\n      }\n    ];\n\n    this.eventMetricModes = [\n      {\n        text: \"All Events\",\n        value: \"all_events_count\"\n      },\n      {\n        text: \"Active Events\",\n        value: \"active_events_count\"\n      },\n      {\n        text: \"Critical Total Count\",\n        value: \"critical_count\"\n      },\n      {\n        text: \"Critical Active Count\",\n        value: \"critical_active_count\"\n      },\n      {\n        text: \"Critical Silenced Count\",\n        value: \"critical_silenced_count\"\n      },\n      {\n        text: \"Warning Total Count\",\n        value: \"warning_count\"\n      },\n      {\n        text: \"Warning Silenced Count\",\n        value: \"warning_silenced_count\"\n      },\n      {\n        text: \"Warning Active Count\",\n        value: \"warning_active_count\"\n      },\n      {\n        text: \"Unknown Total Count\",\n        value: \"unknown_count\"\n      },\n      {\n        text: \"Unknown Active Count\",\n        value: \"unknown_active_count\"\n      },\n      {\n        text: \"Unknown Silenced Count\",\n        value: \"unknown_silenced_count\"\n      },\n      {\n        text: \"Silenced Total Count\",\n        value: \"silenced_count\"\n      },\n      {\n        text: \"Clients Silenced Count\",\n        value: \"clients_silenced_count\"\n      },\n      {\n        text: \"Checks Silenced Count\",\n        value: \"checks_silenced_count\"\n      }\n    ];\n    this.target.clientQueryMode = this.target.clientQueryMode || \"count\";\n    this.target.eventMetricMode = this.target.eventMetricMode || \"all_events_count\";\n\n    this.target.aggregateMode = this.target.aggregateMode || \"list\";\n    // default source type is events\n    this.target.sourceType = this.target.sourceType || \"events\";\n    // no dimensions initially\n    this.target.dimensions = this.target.dimensions || [];\n  }\n\n  /**\n   * [removeDimension description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  removeDimension(dimension) {\n    if (this.target.dimensions) {\n      this.target.dimensions.splice(this.target.dimensions.indexOf(dimension), 1);\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /**\n   * [addDimension description]\n   */\n  addDimension() {\n    if (!this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    var dimensionsForSourceType = this.dimensionTypes[this.target.sourceType];\n    var defaultDimensionType = dimensionsForSourceType[0].value;\n    this.target.dimensions.push({\n      name: null,\n      value: null,\n      dimensionType: defaultDimensionType\n    });\n  }\n\n  /**\n   * [getDimensionValues description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  getDimensionValues(dimension) {\n    if (dimension) {\n      //console.log(\"have a dimension, getting available values\");\n      return this.datasource.dimensionFindValues(this.target, dimension)\n        .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  /**\n   * [removeFilter description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  removeFilter(filter) {\n    if (this.target.filters) {\n      this.target.filters.splice(this.target.filters.indexOf(filter), 1);\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /**\n   * [addFilter description]\n   */\n  addFilter() {\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n    var filtersForSourceType = this.filterTypes[this.target.sourceType];\n    var defaultFilterType = filtersForSourceType[0].type;\n    this.target.filters.push({\n      name: null,\n      value: null,\n      filterType: defaultFilterType\n    });\n  }\n\n  /**\n   * [getFilterValues description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  getFilterValues(filter) {\n    if (filter) {\n      //console.log(\"have a dimension, getting available values\");\n      return this.datasource.filterFindValues(this.target, filter)\n        .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  /**\n   * [getOptions description]\n   * @return {[type]} [description]\n   */\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(true));\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  /**\n   * [sourceTypeChanged description]\n   * @return {[type]} [description]\n   */\n  sourceTypeChanged() {\n    // reset dimensions\n    if (this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    this.onChangeInternal();\n  }\n\n  /**\n   * [modeChanged description]\n   * @return {[type]} [description]\n   */\n  modeChanged() {\n    this.onChangeInternal();\n  }\n\n  /**\n   * [onChangeInternal description]\n   * @return {[type]} [description]\n   */\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n}\n"]}