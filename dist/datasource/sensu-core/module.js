define(["app/plugins/sdk","lodash","app/core/utils/kbn"],function(e,t,a){return function(e){var t={};function a(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,a),s.l=!0,s.exports}return a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)a.d(n,s,function(t){return e[t]}.bind(null,s));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=758)}({17:function(e,t,a){"use strict";a.d(t,"c",function(){return s}),a.d(t,"a",function(){return r}),a.d(t,"b",function(){return i}),a.d(t,"d",function(){return l});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)};function s(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}var r=function(){return(r=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var s in t=arguments[a])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)};function i(e,t,a,n){return new(a||(a=Promise))(function(s,r){function i(e){try{c(n.next(e))}catch(e){r(e)}}function l(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){e.done?s(e.value):new a(function(t){t(e.value)}).then(i,l)}c((n=n.apply(e,t||[])).next())})}function l(e,t){var a,n,s,r,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return r={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function l(r){return function(l){return function(r){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,n&&(s=2&r[0]?n.return:r[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,r[1])).done)return s;switch(n=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,n=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!(s=0<(s=i.trys).length&&s[s.length-1])&&(6===r[0]||2===r[0])){i=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){i.label=r[1];break}if(6===r[0]&&i.label<s[1]){i.label=s[1],s=r;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(r);break}s[2]&&i.ops.pop(),i.trys.pop();continue}r=t.call(e,i)}catch(e){r=[6,e],n=0}finally{a=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,l])}}}},32:function(t,a){t.exports=e},33:function(e,a){e.exports=t},758:function(e,t,a){"use strict";a.r(t);var n=a(33),s=a.n(n),r=a(96);function i(e,t){for(var a={data:[]},n=0;n<t.data.length;n++)if(t.data[n].target===e){a.data=t.data[n].response.data;break}return a}function l(e,t){var a=Math.floor(Date.now());null===t&&(t=[]);for(var n=0;n<e.summary.length;n++){var s=e.summary[n],r={target:e.check,clients:s.clients,datapoints:[[s.total,a]]};t.push(r)}return t}function c(e,t){var a=Math.floor(Date.now());null===t&&(t=[]);for(var n=0;n<e.clients.length;n++){var s=e.clients[n],r={target:e.name,datapoints:[[s,a]]};t.push(r)}return t}function u(e,t){var a=Math.floor(Date.now());null===t&&(t=[]);for(var n=0;n<e.checks.length;n++){var s=e.checks[n],r={target:e.name,datapoints:[[s,a]]};t.push(r)}return t}function o(e,t){null===t&&(t=[]);var a=Math.floor(Date.now()),n={target:"checks",datapoints:[[e.checks,a]]};return t.push(n),n={target:"clients",datapoints:[[e.clients,a]]},t.push(n),n={target:"critical",datapoints:[[e.results.critical,a]]},t.push(n),n={target:"ok",datapoints:[[e.results.ok,a]]},t.push(n),n={target:"stale",datapoints:[[e.results.stale,a]]},t.push(n),n={target:"total",datapoints:[[e.results.total,a]]},t.push(n),n={target:"unknown",datapoints:[[e.results.unknown,a]]},t.push(n),n={target:"warning",datapoints:[[e.results.warning,a]]},t.push(n),t}function d(e,t){for(var a=[],n=0;n<e.filters.length;n++){var s=e.filters[n];switch(s.filterType){case"field":for(var r=0;r<t.data.length;r++)t.data[r].hasOwnProperty(s.filterFieldName)&&t.data[r][s.filterFieldName]===s.filterFieldValueReplaced&&-1===a.indexOf(t.data[r].name)&&a.push(t.data[r].name);break;case"fetch":for(r=0;r<t.data.length;r++)s.value===t.data[r].name&&-1===a.indexOf(t.data[r].name)&&a.push(t.data[r].name);break;case"regex":try{var i=s.filterRegexFlags,l=new RegExp(s.filterRegex,i);for(r=0;r<t.data.length;r++)l.test(t.data[r].name)&&-1===a.indexOf(t.data[r].name)&&a.push(t.data[r].name)}catch(e){s.filterMessage="Invalid Regular Expression"}}}return a}function h(e,t){if(void 0===e.filters)return!0;if(0===e.filters.length)return!0;for(var a=0;a<e.filters.length;a++){var n=e.filters[a];switch(n.filterType){case"field":if(t.client.hasOwnProperty(n.filterFieldName)&&t.client[n.filterFieldName]===n.filterFieldValueReplaced)return!0}}return!1}var v=function(){function e(e,t,a,n,s){this.url=e.url,this.name=e.name,this.basicAuth=e.basicAuth,this.withCredentials=e.withCredentials,this.q=t,this.backendSrv=a,this.templateSrv=n,this.uiSegmentSrv=s,this.minimumInterval=6e4}return e.prototype.metricFindQuery=function(e){var t=!1,a=!1,n="/clients",s="";if(void 0!==(e=this.templateSrv.replaceWithText(e))&&""!==e){switch(!0){case/clienttags/.test(e):n="/clients",t=!0;break;case/clienttagvalue/.test(e):n="/clients",a=!0,s=e.split("tag=")[1];break;default:n=e}n.startsWith("/",0)||(n="/"+n)}var r=this;return this.backendSrv.datasourceRequest({url:this.url+n,data:e,method:"GET",headers:{"Content-Type":"application/json",Authorization:this.basicAuth}}).then(function(e){return t?r.generateClientQueryTags(e):a?r.getClientQueryTagValue(e,s):r.mapToClientNameAndVersion(e)})},e.prototype.generateClientQueryTags=function(e){for(var t=[],a=[],n=["name","socket","address","subscriptions","timestamp","keepalive","keepalives","redact","version"],s=0;s<e.data.length;s++)for(var r=Object.keys(e.data[s]),i=0;i<r.length;i++){var l=r[i];if(-1===n.indexOf(l)){var c=l+"="+e.data[s][l];a.indexOf(c)<0&&a.push(c)}}if(0<a.length)for(a.sort(),s=0;s<a.length;s++)t.push({text:a[s],expandable:!0});return t},e.prototype.getClientQueryTagValue=function(e,t){for(var a=t.split("="),n=a[0],s=a[1],r=[],i=[],l=0;l<e.data.length;l++)for(var c=Object.keys(e.data[l]),u=0;u<c.length;u++)if(n===c[u])if("string"!=typeof e.data[l][n]){for(var o=0;o<e.data[l][n].length;o++)if(e.data[l][n][o]===s){var d=e.data[l].name;i.indexOf(d)<0&&i.push(d)}}else e.data[l][n]===s&&(d=e.data[l].name,i.indexOf(d)<0&&i.push(d));if(0<i.length)for(l=0;l<i.length;l++)r.push({text:i[l]});return r},e.prototype.mapToClientNameAndVersion=function(e){return 0===e.data.length?{}:s.a.map(e.data,function(e){var t={text:"",expandable:!0};try{t={text:e.name,expandable:!0}}catch(e){console.log("bad data")}return t})},e.prototype.getClientNames=function(e){for(var t=[],a=0;a<e.length;a++)if("clientName"===e[a].dimensionType){var n=e[a].value;if(this.templateSrv.getVariableName(n)){var s=this.templateSrv.replace(n);if(0<s.length)if(s.startsWith("{")){var r=(s=s.slice(1,-1)).split(",");t.push.apply(t,r)}else t.push(s)}else t.push(n)}return t},e.prototype.getCheckNames=function(e){for(var t=[],a=0;a<e.length;a++)if("checkName"===e[a].dimensionType){var n=e[a].value;if(this.templateSrv.getVariableName(n)){var s=this.templateSrv.replace(n);if(0<s.length)if(s.startsWith("{")){var r=(s=s.slice(1,-1)).split(",");t.push.apply(t,r)}else t.push(s)}else t.push(n)}return t},e.prototype.getAggregateNames=function(e){for(var t=[],a=0;a<e.length;a++)if("aggregateName"===e[a].dimensionType){var n=e[a].value;if(this.templateSrv.getVariableName(n)){var s=this.templateSrv.replace(n);if(0<s.length)if(s.startsWith("{")){var r=(s=s.slice(1,-1)).split(",");t.push.apply(t,r)}else t.push(s)}else t.push(n)}return t},e.prototype.replaceFilterValues=function(e){for(var t=0;t<e.length;t++){var a=e[t];switch(a.filterType){case"field":var n=a.filterFieldValue,s=this.templateSrv.replace(n);a.filterFieldValueReplaced=s}}return e},e.prototype.getQueryURIByType=function(e){var t=[],a=null,n=null,s=null;switch(void 0!==e.dimensions&&(a=this.getClientNames(e.dimensions),n=this.getCheckNames(e.dimensions),s=this.getAggregateNames(e.dimensions)),void 0!==e.filters&&this.replaceFilterValues(e.filters),void 0!==e.alias&&(e.aliasReplaced=this.templateSrv.replace(e.alias)),e.sourceType){case"aggregates":case"aggregates_json":t=function(e,t){var a=[],n="/aggregates",s=null;if(t.length)for(var r=0;r<t.length;r++){switch(n="/aggregates/"+(s=t[r]),e.aggregateMode){case"checks":n="/aggregates/"+s+"/checks";break;case"clients":n="/aggregates/"+s+"/clients";break;case"list":n="/aggregates/"+s;break;case"results_critical":n="/aggregates/"+s+"/results/critical";break;case"results_ok":n="/aggregates/"+s+"/results/ok";break;case"results_unknown":n="/aggregates/"+s+"/results/unknown";break;case"results_warning":n="/aggregates/"+s+"/results/warning"}a.push(n)}return 0===a.length&&a.push(n),a}(e,s);break;case"check_subscriptions":break;case"client_health_json":t=function(e){var t=[];if(e.length)for(var a=0;a<e.length;a++){var n=e[a],s="/results/"+n;t.push(s);var r="/events/"+n;t.push(r)}return 0===t.length&&(t.push("/results"),t.push("/events")),t}(a);break;case"clients":case"clients_json":t=function(e,t){var a=[],n="/clients";if(t.length)for(var s=0;s<t.length;s++)n="/clients/"+t[s],a.push(n);return 0===a.length&&a.push(n),a.push("/events"),a.push("/results"),a}(0,a);break;case"clienthistory":t=function(e){var t=[],a="/clients";if(e.length)for(var n=0;n<e.length;n++)a="/clients/"+e[n]+"/history",t.push(a);return 0===t.length&&t.push(a),t}(a);break;case"event_metrics":case"event_metrics_json":case"events":case"events_json":t=function(e,t){var a=[],n="/events",s=null;if(t.length)for(var r=0;r<t.length;r++)n="/events/"+(s=t[r]),a.push(n);if(e.length&&t.length)for(r=0;r<t.length;r++){s=t[r];for(var i=0;i<e.length;i++)n="/events/"+s+"/"+e[r],a.push(n)}return 0===a.length&&a.push(n),a}(n,a);break;case"results_json":case"results_table":t=function(e,t){var a=[],n="/results",s=null;if(t.length)for(var r=0;r<t.length;r++)n="/results/"+(s=t[r]),a.push(n);if(e.length&&t.length)for(r=0;r<t.length;r++){s=t[r];for(var i=0;i<e.length;i++)n="/results/"+s+"/"+e[r],a.push(n)}return 0===a.length&&a.push(n),a}(n,a)}return t},e.prototype.getBuckets=function(e){for(var t={},a=0;a<e.data.length;a++){var n=e.data[a].target.refId;t.hasOwnProperty(n)?t[n].push(e.data[a]):t[n]=[e.data[a]]}return t},e.prototype.processConversions=function(e,t,a){var n={data:[]};switch(e){case"aggregates":n=function(e,t){var a=i(e,t);if(void 0===a.data.length){var n=a.data;a.data=[],a.data.push(n)}for(var s=null,r=0;r<a.data.length;r++){var d=a.data[r];if(void 0===d.checks)if(void 0===d.clients)if(void 0===d.summary){var h=[],v=Math.floor(Date.now());h[0]=[0,v],d.datapoints=h,d.target=d.name}else s=l(d,s);else s=c(d,s);else switch(typeof d.checks){case"number":s=o(d,s);break;case"object":s=u(d,s)}}return null!==s&&(a.data=s),a}(t,a);break;case"aggregates_json":return function(e,t){var a=i(e,t),n="ALL";0<e.dimensions.length&&(n=e.dimensions[0].value);for(var s=0;s<a.data.length;s++){var r=a.data[s],l=[],c={client:r.name,checks:r.checks,aggregate_name:n};l.push(c),r.datapoints=l,r.type="docs"}return a}(t,a);case"clients":return function(e,t){var a=i(e,t);if(void 0===a.data.length){var n=a.data;a.data=[],a.data.push(n)}switch(e.clientQueryMode){case"list":var s=[],r=[];if(void 0!==e.filters&&0<e.filters.length){r=d(e,a);for(var l=0;l<a.data.length;l++)0<=r.indexOf(a.data[l].name)&&s.push(a.data[l]);a.data=s}for(l=0;l<a.data.length;l++){var c=[];void 0!==(u=a.data[l]).timestamp&&(c[0]=[1,1e3*u.timestamp]),u.datapoints=c,u.target=u.name}break;case"count":if(0<a.data.length){var u=a.data[0],o=c=[];o=void 0!==e.filters&&0<e.filters.length?d(e,a).length:a.data.length,void 0!==u.timestamp&&(c[0]=[o,1e3*u.timestamp]),u.datapoints=c,u.address=void 0,u.name=void 0,u.socket=void 0,u.subscriptions=void 0,u.version=void 0,u.target="ClientCount",e.aliasReplaced&&(u.target=e.aliasReplaced),a.data=[u]}}return a}(t,a);case"clients_json":return function(e,t){var a=i(e,t);if(void 0===a.data.length){var n=a.data;a.data=[],a.data.push(n)}for(var s=[],r=0;r<a.data.length;r++){var l=!0,c=JSON.parse(JSON.stringify(a.data[r]));if(c.datapoints=[],c.type="docs",c.address,"unknown"===c.address&&(c.address="JIT Client"),void 0!==e.filters&&void 0!==e.filters.length)for(var u=0;u<e.filters.length;u++){var o=e.filters[u];switch(o.filterType){case"regex":try{var d=o.filterRegexFlags;new RegExp(o.filterRegex,d).test(c.name)?o.filterMessage="OK":l=!1}catch(e){o.filterMessage="Invalid Regular Expression";break}break;case"field":c.hasOwnProperty(o.filterFieldName)?c[o.filterFieldName]!==o.filterFieldValueReplaced&&(l=!1):l=!1}}if(l){var h={type:"docs",datapoints:[c]};s.push(h)}}return a.data=s,a}(t,a);case"client_health_json":return function(e,t){for(var a=i(e,t),n=[],s=0;s<a.data.length;s++){var r=a.data[s],l=[];if(void 0!==r.check.issued){var c={timestamp:1e3*r.check.issued,check_name:r.check.name,client:r.client,check:r.check,occurrences:r.occurrences,occurrences_watermark:r.occurrences_watermark,action:r.action,id:r.id,last_state_change:1e3*r.last_state_change,last_ok:1e3*r.last_ok,silenced:r.silenced,silenced_by:r.silenced_by};try{c.check.issued=1e3*c.check.issued,c.check.executed=1e3*c.check.executed}catch(e){}l.push(c),r.datapoints=l,delete r.check,delete r.client,r.type="docs",r.silenced||n.push(r),r.silenced&&!e.hideSilencedEvents&&n.push(r)}}return a.data=n,a}(t,a);case"clienthistory":n=function(e,t){for(var a=i(e,t),n=0;n<a.data.length;n++){var s=a.data[n],r=[],l=0;if(void 0!==s.last_execution&&(l=s.last_execution-60*s.history.length),void 0!==s.history)for(var c=0;c<s.history.length;c++)r[c]=[s.history[c],1e3*(l+60*c)];s.datapoints=r,s.target="unknown",void 0!==s.name&&(s.target=s.name),void 0!==s.check&&(s.target=s.check)}return a}(t,a);break;case"events":n=function(e,t){var a=i(e,t);if(void 0===a.data.length){var n=a.data;a.data=[],a.data.push(n)}for(var s=[],r=0;r<a.data.length;r++){var l=a.data[r],c=[],u=0;void 0!==l.timestamp&&(u=l.timestamp-60*l.check.history.length),void 0!==l.last_execution&&(u=l.last_execution-60*l.history.length);for(var o=0;o<l.check.history.length;o++)c[o]=[l.check.history[o],1e3*(u+60*o)];l.datapoints=c,l.target=l.client.name,l.clientName=l.client.name,h(e,l)&&(l.silenced||s.push(l),l.silenced&&!e.hideSilencedEvents&&s.push(l))}return{data:s}}(t,a);break;case"events_json":n=function(e,t){for(var a=i(e,t),n=[],s=0;s<a.data.length;s++){var r=a.data[s],l=[];if(void 0!==r.check.issued&&h(e,r)){var c=r.client.name,u=r.client.name.split(".");0<u.length&&(c=u[0]),r.client.client_short_name=c;var o="UNKNOWN";if(void 0!==r.check&&void 0!==r.check.status)switch(r.check.status){case 0:o="OK";break;case 1:o="WARNING";break;case 2:o="CRITICAL";break;case 3:default:o="UNKNOWN"}r.check.status_text=o;var d={timestamp:1e3*r.check.issued,check_name:r.check.name,client:r.client,check:r.check,occurrences:r.occurrences,occurrences_watermark:r.occurrences_watermark,action:r.action,id:r.id,last_state_change:1e3*r.last_state_change,last_ok:1e3*r.last_ok,silenced:r.silenced,silenced_by:r.silenced_by};try{d.check.issued=1e3*d.check.issued,d.check.executed=1e3*d.check.executed}catch(e){}l.push(d),r.datapoints=l,delete r.check,delete r.client,r.type="docs",r.silenced||n.push(r),r.silenced&&!e.hideSilencedEvents&&n.push(r)}}return{data:n}}(t,a);break;case"event_metrics":n=function(e,t){var a=i(e,t),n={data:[]},s=0;try{s=1e3*a.data[0].check.issued}catch(e){}for(var r={target:"allEvents",timestamp:s,numEvents:0,numSilenced:0,numClientsSilenced:0,numChecksSilenced:0,numWarningEvents:0,numWarningEventsSilenced:0,numCriticalEvents:0,numCriticalEventsSilenced:0,numUnknownEvents:0,numUnknownEventsSilenced:0},l=[],c=[],u=0;u<a.data.length;u++){var o=a.data[u];if(void 0!==o.check.issued){if(void 0!==o.check&&void 0!==o.check.status&&h(e,o))switch(r.numEvents+=1,o.check.status){case 1:r.numWarningEvents+=1,o.silenced&&(r.numWarningEventsSilenced+=1,r.numSilenced+=1);break;case 2:r.numCriticalEvents+=1,o.silenced&&(r.numCriticalEventsSilenced+=1,r.numSilenced+=1);break;default:r.numUnknownEvents+=1,o.silenced&&(r.numUnknownEventsSilenced+=1,r.numSilenced+=1)}l.indexOf(o.client.name)<1&&l.push(o.client.name),c.indexOf(o.check.name)<1&&c.push(o.check.name);for(var d=0;d<o.silenced_by.length;d++)0<=o.silenced_by[d].indexOf("*")?r.numClientsSilenced+=1:r.numChecksSilenced+=1}}var v=null;switch(void 0!==e.name&&(v=e.name),void 0!==e.aliasReplaced&&(v=e.aliasReplaced),n.data=[{target:v,datapoints:[[0,s]]}],e.eventMetricMode){case"all_events_count":null===v&&(n.data[0].target="all_events_count"),n.data[0].datapoints=[[r.numEvents,s]];break;case"active_events_count":null===v&&(n.data[0].target="active_events_count"),n.data[0].datapoints=[[r.numEvents-r.numSilenced,s]];break;case"critical_count":null===v&&(n.data[0].target="critical_events_count"),n.data[0].datapoints=[[r.numCriticalEvents,s]];break;case"critical_active_count":null===v&&(n.data[0].target="critical_active_count"),n.data[0].datapoints=[[r.numCriticalEvents-r.numCriticalEventsSilenced,s]];break;case"critical_silenced_count":null===v&&(n.data[0].target="critical_silenced_count"),n.data[0].datapoints=[[r.numCriticalEventsSilenced,s]];break;case"warning_count":null===v&&(n.data[0].target="warning_events_count"),n.data[0].datapoints=[[r.numWarningEvents,s]];break;case"warning_active_count":null===v&&(n.data[0].target="warning_active_count"),n.data[0].datapoints=[[r.numWarningEvents-r.numWarningEventsSilenced,s]];break;case"warning_silenced_count":null===v&&(n.data[0].target="warning_silenced_count"),n.data[0].datapoints=[[r.numWarningEventsSilenced,s]];break;case"unknown_count":null===v&&(n.data[0].target="unknown_events_count"),n.data[0].datapoints=[[r.numUnknownEvents,s]];break;case"unknown_active_count":null===v&&(n.data[0].target="unknown_active_count"),n.data[0].datapoints=[[r.numUnknownEvents-r.numUnknownEventsSilenced,s]];break;case"unknown_silenced_count":null===v&&(n.data[0].target="unknown_silenced_count"),n.data[0].datapoints=[[r.numUnknownEventsSilenced,s]];break;case"silenced_count":null===v&&(n.data[0].target="silenced_events_count"),n.data[0].datapoints=[[r.numSilenced,s]];break;case"clients_silenced_count":null===v&&(n.data[0].target="clients_silenced_count"),n.data[0].datapoints=[[r.numClientsSilenced,s]];break;case"checks_silenced_count":null===v&&(n.data[0].target="checks_silenced_count"),n.data[0].datapoints=[[r.numChecksSilenced,s]];break;default:null===v&&(n.data[0].target="all_events_count"),n.data[0].datapoints=[[r.numEvents,s]]}return n}(t,a);break;case"event_metrics_json":n=function(e,t){var a=i(e,t),n=0;try{n=1e3*a.data[0].check.issued}catch(e){}for(var s={target:"allEvents",timestamp:n,numEvents:0,numSilenced:0,numClientsSilenced:0,numChecksSilenced:0,numWarningEvents:0,numWarningEventsSilenced:0,numCriticalEvents:0,numCriticalEventsSilenced:0,numUnknownEvents:0,numUnknownEventsSilenced:0},r=[],l=[],c=0;c<a.data.length;c++){var u=a.data[c];if(void 0!==u.check.issued){if(void 0!==u.check&&void 0!==u.check.status&&h(e,u))switch(s.numEvents+=1,u.check.status){case 1:s.numWarningEvents+=1,u.silenced&&(s.numWarningEventsSilenced+=1,s.numSilenced+=1);break;case 2:s.numCriticalEvents+=1,u.silenced&&(s.numCriticalEventsSilenced+=1,s.numSilenced+=1);break;default:s.numUnknownEvents+=1,u.silenced&&(s.numUnknownEventsSilenced+=1,s.numSilenced+=1)}r.indexOf(u.client.name)<0&&r.push(u.client.name),l.indexOf(u.check.name)<0&&l.push(u.check.name);for(var o=0;o<u.silenced_by.length;o++)0<=u.silenced_by[o].indexOf("*")?s.numClientsSilenced+=1:s.numChecksSilenced+=1}}return s.numClientsSilenced=r.length,s.numChecksSilenced=l.length,a.data=[{target:"allEvents",timestamp:n,type:"docs",datapoints:[s]}],a}(t,a);break;case"results_json":n=function(e,t){for(var a=i(e,t),n=0;n<a.data.length;n++){var s=a.data[n],r=[];if(void 0!==s.check.issued){var l={timestamp:1e3*s.check.issued,message:s.check.name,client:s.client,check:{name:s.check.name,issued:1e3*s.check.issued,executed:1e3*s.check.executed,output:s.check.output,status:s.check.status,type:s.check.type}};r.push(l),s.datapoints=r,delete s.check,delete s.client,s.type="docs"}}return a}(t,a);break;case"results_table":n=function(e,t){var a=i(e,t);if(void 0===a.data.length){var n=a.data;a.data=[],a.data.push(n)}for(var s=[],r=0;r<a.data.length;r++){var l=a.data[r],c=[1e3*l.check.issued,l.client,l.check.name,l.check.status,1e3*l.check.issued,1e3*l.check.executed,l.check.output,l.check.type,l.check.thresholds.warning,l.check.thresholds.critical];s.push(c)}var u=a.data[0],o=[];return o[0]=[u.check.status,1e3*u.check.issued],u.datapoints=o,u.type="table",u.columns=[{text:"Time",type:"date"},{text:"client"},{text:"check.name"},{text:"check.status"},{text:"check.issued",type:"date"},{text:"check.executed",type:"date"},{text:"check.output"},{text:"check.type"},{text:"check.thresholds.warning"},{text:"check.thresholds.critical"}],u.rows=s,a.data=[u],a}(t,a);break;default:console.log("Unknown source type")}return n},e.prototype.setRawTargets=function(e,t){for(var a=0;a<t.data.length;a++)t.data[a].rawTarget=t.data[a].target;return t},e.prototype.processFilters=function(e,t){if(void 0!==e.filters&&0<e.filters.length){for(var a=[],n=0;n<e.filters.length;n++)for(var s=e.filters[n],r=0;r<t.data.length;r++){var i=t.data[r].rawTarget;s.filterType===i&&(e.aliasReplaced&&(t.data[r].target=e.aliasReplaced+" "+i),a.push(t.data[r]))}0<a.length&&(t.data=a)}else if(e.aliasReplaced)for(n=0;n<t.data.length;n++)t.data[n].target=e.aliasReplaced;return t},e.prototype.parseQueryResult=function(e){var t={data:[]};if(!e||!e.data)return t;for(var a=this.getBuckets(e),n=Object.keys(a),s=0;s<n.length;s++){var r=n[s],i=a[r][0].target.sourceType,l=a[r][0].target,c=this.processConversions(i,l,e);c=this.setRawTargets(l,c),c=this.processFilters(l,c);for(var u=0;u<c.data.length;u++)t.data.push(c.data[u])}return t},e.prototype.getCheckInterval=function(e,t){},e.prototype.dimensionFindValues=function(e,t){var a="/clients";switch(t.dimensionType){case"clientName":a="/clients";break;case"checkName":a="/checks";break;case"aggregateName":a="/aggregates"}return this.backendSrv.datasourceRequest({url:this.url+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:this.basicAuth}}).then(this.mapToTextValue)},e.prototype.mapToTextValue=function(e){return s.a.map(e.data,function(e,t){return{text:e.name,value:e.name}})},e.prototype.filterFindValues=function(e,t){var a="/clients";switch(t.filterType){case"clientName":a="/clients";break;case"checkName":a="/checks";break;case"aggregateName":a="/aggregates"}return this.backendSrv.datasourceRequest({url:this.url+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:this.basicAuth}}).then(this.mapToTextValue)},e.prototype.query=function(e){var t=[];e.targets.forEach(function(e){t.push(e)});var a=e.interval;Object(r.interval_to_ms)(a),Object(r.interval_to_ms)(a)<this.minimumInterval&&(a=Object(r.secondsToHms)(this.minimumInterval/1e3));var n=this.q.defer();return 0===t.length?n.resolve({data:[]}):this.q.all({first:this.multipleDataQueries(t)}).then(function(e){n.resolve(e.first)}),n.promise},e.prototype.singleDataQuery=function(e,t){var a=this.q.defer(),n={method:"GET",url:this.url+t,params:{},headers:{"Content-Type":"application/json",Authorization:this.basicAuth}};return this.backendSrv.datasourceRequest(n).then(function(t){var n=null;200!==t.status&&(console.log("error..."),n=new Error("Bad Status: "+t.status),a.reject(n)),t.data||(n=new Error("No data"),a.reject(n)),a.resolve({target:e,response:t})},function(e){console.error("Unable to load data. Response: %o",e.data?e.data.message:e);var t=new Error("Unable to load data");a.reject(t)}),a.promise},e.prototype.multiDone=function(e){return this.parseQueryResult(e)},e.prototype.multipleDataQueries=function(e){for(var t=this.q.defer(),a=[],n=this,s=0;s<e.length;){for(var r=e[s],i=this.getQueryURIByType(r),l=0;l<i.length;l++)a.push(n.singleDataQuery(r,i[l]));s++}return this.q.all(a).then(function(e){for(var a={data:[]},s=0;s<e.length;)a.data.push(e[s]),s++;t.resolve(n.multiDone(a))},function(e){t.reject(e)},function(e){t.update(e)}),t.promise},e.prototype.getServerInfo=function(){return this.backendSrv.datasourceRequest({url:this.url+"/info",headers:{"Content-Type":"application/json",Authorization:this.basicAuth},method:"GET"}).then(function(e){return e.data})},e.prototype.testDatasource=function(){return this.backendSrv.datasourceRequest({url:this.url+"/info",headers:{"Content-Type":"application/json",Authorization:this.basicAuth},method:"GET"}).then(function(e){return 200===e.status?{status:"success",message:"Data source is working",title:"Success"}:{status:"error",message:"Data source is not working",title:"Error"}})},e}(),g=a(17),p=a(32),f=function(e){function t(t,a,n,s){var r=e.call(this,t,a)||this;return r.scope=t,r.uiSegmentSrv=s,r.templateSrv=n,r.sourceTypes=[{text:"Aggregates",value:"aggregates"},{text:"Aggregates as JSON",value:"aggregates_json"},{text:"Check Subscriptions",value:"check_subscriptions"},{text:"Clients",value:"clients"},{text:"Clients as JSON",value:"clients_json"},{text:"Client Health as JSON",value:"client_health_json"},{text:"Client History",value:"client_history"},{text:"Events",value:"events"},{text:"Events as JSON",value:"events_json"},{text:"Event Metrics",value:"event_metrics"},{text:"Event Metrics JSON",value:"event_metrics_json"},{text:"Results as JSON",value:"results_json"},{text:"Results as Table",value:"results_table"},{text:"Sensu Health",value:"sensu_health_json"},{text:"Silenced Entries",value:"silenced_entries_json"},{text:"Stashes",value:"stashes_json"}],r.dimensionTypes={aggregates:[{text:"Aggregate Name",value:"aggregateName"}],aggregates_json:[{text:"Aggregate Name",value:"aggregateName"}],check_subscriptions:[{text:"Aggregate Name",value:"aggregateName"},{text:"Check Name",value:"checkName"},{text:"Check Type",value:"checkType"},{text:"Source (JIT Client)",value:"sourceName"}],clients:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],client_health_json:[{text:"Client Name",value:"clientName"}],client_history:[{text:"Client Name",value:"clientName"}],clients_json:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],events:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],events_json:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],event_metrics:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],event_metrics_json:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],results_json:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],results_table:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],sensu_health_json:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],silenced_entries_json:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}],stashes_json:[{text:"Client Name",value:"clientName"},{text:"Check Name",value:"checkName"}]},r.filterTypes={aggregates:[{text:"Number of Checks",value:"checks",type:"value"},{text:"Number of Clients",value:"clients",type:"value"},{text:"State Critical",value:"critical",type:"value"},{text:"State OK",value:"ok",type:"value"},{text:"State Stale",value:"stale",type:"value"},{text:"State Unknown",value:"unknown",type:"value"},{text:"State Warning",value:"warning",type:"value"},{text:"Total Checks",value:"total",type:"value"}],client_health_json:[{text:"Client Name",value:"fetch"},{text:"Client Name RegEx",value:"regex"}],clients:[{text:"Client Name",value:"fetch"},{text:"Client Name RegEx",value:"regex"},{text:"Field",value:"field"}],clients_json:[{text:"Client Name",value:"fetch"},{text:"Client Name RegEx",value:"regex"},{text:"Field",value:"field"}],events:[{text:"Client Name",value:"fetch"},{text:"Client Name RegEx",value:"regex"},{text:"Check Name RegEx",value:"regex"},{text:"Field",value:"field"}],events_json:[{text:"Client Name",value:"fetch"},{text:"Client Name RegEx",value:"regex"},{text:"Check Name RegEx",value:"regex"},{text:"Field",value:"field"}],event_metrics:[{text:"Client Name",value:"fetch"},{text:"Client Name RegEx",value:"regex"},{text:"Check Name RegEx",value:"regex"},{text:"Field",value:"field"}],event_metrics_json:[{text:"Client Name",value:"fetch"},{text:"Client Name RegEx",value:"regex"},{text:"Check Name RegEx",value:"regex"},{text:"Field",value:"field"}],results_json:[{text:"Client Name",value:"fetch"},{text:"Client Name RegEx",value:"regex"},{text:"Check Name RegEx",value:"regex"},{text:"Field",value:"field"}]},r.aggregateModes=[{text:"List",value:"list"},{text:"Clients",value:"clients"},{text:"Checks",value:"checks"},{text:"Results Critical",value:"results_critical"},{text:"Results OK",value:"results_ok"},{text:"Results Unknown",value:"results_unknown"},{text:"Results Warning",value:"results_warning"}],r.clientQueryModes=[{text:"List",value:"list"},{text:"Count",value:"count"}],r.eventMetricModes=[{text:"All Events",value:"all_events_count"},{text:"Active Events",value:"active_events_count"},{text:"Critical Total Count",value:"critical_count"},{text:"Critical Active Count",value:"critical_active_count"},{text:"Critical Silenced Count",value:"critical_silenced_count"},{text:"Warning Total Count",value:"warning_count"},{text:"Warning Silenced Count",value:"warning_silenced_count"},{text:"Warning Active Count",value:"warning_active_count"},{text:"Unknown Total Count",value:"unknown_count"},{text:"Unknown Active Count",value:"unknown_active_count"},{text:"Unknown Silenced Count",value:"unknown_silenced_count"},{text:"Silenced Total Count",value:"silenced_count"},{text:"Clients Silenced Count",value:"clients_silenced_count"},{text:"Checks Silenced Count",value:"checks_silenced_count"}],r.target.clientQueryMode=r.target.clientQueryMode||"count",r.target.eventMetricMode=r.target.eventMetricMode||"all_events_count",r.target.aggregateMode=r.target.aggregateMode||"list",r.target.sourceType=r.target.sourceType||"events",r.target.dimensions=r.target.dimensions||[],r}return g.c(t,e),t.prototype.removeDimension=function(e){this.target.dimensions&&(this.target.dimensions.splice(this.target.dimensions.indexOf(e),1),this.panelCtrl.refresh())},t.prototype.addDimension=function(){this.target.dimensions||(this.target.dimensions=[]);var e=this.dimensionTypes[this.target.sourceType][0].value;this.target.dimensions.push({name:null,value:null,dimensionType:e})},t.prototype.getDimensionValues=function(e){if(e)return this.datasource.dimensionFindValues(this.target,e).then(this.uiSegmentSrv.transformToSegments(!0))},t.prototype.removeFilter=function(e){this.target.filters&&(this.target.filters.splice(this.target.filters.indexOf(e),1),this.panelCtrl.refresh())},t.prototype.addFilter=function(){this.target.filters||(this.target.filters=[]);var e=this.filterTypes[this.target.sourceType][0].type;this.target.filters.push({name:null,value:null,filterType:e})},t.prototype.getFilterValues=function(e){if(e)return this.datasource.filterFindValues(this.target,e).then(this.uiSegmentSrv.transformToSegments(!0))},t.prototype.getOptions=function(){return this.datasource.metricFindQuery(this.target).then(this.uiSegmentSrv.transformToSegments(!0))},t.prototype.sourceTypeChanged=function(){this.target.dimensions&&(this.target.dimensions=[]),this.onChangeInternal()},t.prototype.modeChanged=function(){this.onChangeInternal()},t.prototype.onChangeInternal=function(){this.panelCtrl.refresh()},t.templateUrl="datasource/sensu-core/partials/query.editor.html",t}(p.QueryCtrl);a.d(t,"ConfigCtrl",function(){return m}),a.d(t,"QueryOptionsCtrl",function(){return k}),a.d(t,"Datasource",function(){return v}),a.d(t,"QueryCtrl",function(){return f}),Object(p.loadPluginCss)({dark:"plugins/grafana-sensu-app/datasource/sensu-core/css/query-editor.css",light:"plugins/grafana-sensu-app/datasource/sensu-core/css/query-editor.css"});var m=function(){function e(){}return e.templateUrl="datasource/sensu-core/partials/config.html",e}(),k=function(){function e(){}return e.templateUrl="datasource/sensu-core/partials/query.options.html",e}()},96:function(e,t){e.exports=a}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,