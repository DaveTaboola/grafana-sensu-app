{"version":3,"file":"utils.js","sourceRoot":"src/","sources":["panels/common/utils.ts"],"names":[],"mappings":";;;;IAEA,6BAA6B,KAAU,EAAE,aAAkB;QACzD,IAAI,gBAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;YAC7B,OAAO,EAAC,QAAQ,EAAE,aAAa,EAAE,cAAc,EAAE,IAAI,EAAC,CAAC;SACxD;QAED,IAAI,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;QACtB,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnD,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EACzB,IAAI,GAAG,KAAK,GAAG,IAAI,EACnB,IAAI,CAAC;QAET,IAAI,IAAI,GAAG,GAAG,EAAE;YACd,IAAI,GAAG,CAAC,CAAC;SACV;aAAM,IAAI,IAAI,GAAG,CAAC,EAAE;YACnB,IAAI,GAAG,CAAC,CAAC;YAET,IAAI,IAAI,GAAG,IAAI,EAAE;gBACf,IAAI,GAAG,GAAG,CAAC;gBACX,EAAE,GAAG,CAAC;aACP;SACF;aAAM,IAAI,IAAI,GAAG,GAAG,EAAE;YACrB,IAAI,GAAG,CAAC,CAAC;SACV;aAAM;YACL,IAAI,GAAG,EAAE,CAAC;SACX;QAED,IAAI,IAAI,IAAI,CAAC;QAGb,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;YAAE,GAAG,GAAG,CAAC,CAAC;SAAE;QAE7C,IAAI,MAAM,GAAG;YACX,QAAQ,EAAE,CAAC;YACX,cAAc,EAAE,CAAC;SAClB,CAAC;QACF,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACnC,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrF,OAAO,MAAM,CAAC;IAChB,CAAC;;IAcD,6BAA6B,IAAY,EAAE,IAAS,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS;QAC7E,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,KAAK,EAAE;YACd,OAAO,SAAS,CAAC;SAClB;QAED,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC;QAEnB,KAAK,IAAI,QAAQ,GAAG,SAAS,EAAE,QAAQ,IAAI,SAAS,EAAE,QAAQ,EAAE,EAAE;YAChE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAChC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,GAAG,KAAK,EAAE;gBACb,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5B;SACF;QAED,OAAO,CAAC,CAAC;IACb,CAAC;;IAUD,sBAAsB,IAAY,EAAE,IAAY;QAE9C,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACpB,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,OAAO,CAAC,KAAK,CAAC;IACvB,CAAC;;;;;;;;;QAQD,CAAC","sourcesContent":["import _ from \"lodash\";\n\nfunction GetDecimalsForValue(value: any, panelDecimals: any): { decimals; scaledDecimals; } {\n  if (_.isNumber(panelDecimals)) {\n    return {decimals: panelDecimals, scaledDecimals: null};\n  }\n\n  var delta = value / 2;\n  var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n  var magn = Math.pow(10, -dec),\n      norm = delta / magn, // norm is between 1.0 and 10.0\n      size;\n\n  if (norm < 1.5) {\n    size = 1;\n  } else if (norm < 3) {\n    size = 2;\n    // special case for 2.5, requires an extra decimal\n    if (norm > 2.25) {\n      size = 2.5;\n      ++dec;\n    }\n  } else if (norm < 7.5) {\n    size = 5;\n  } else {\n    size = 10;\n  }\n\n  size *= magn;\n\n  // reduce starting decimals if not needed\n  if (Math.floor(value) === value) { dec = 0; }\n\n  var result = {\n    decimals: 0,\n    scaledDecimals: 0,\n  };\n  result.decimals = Math.max(0, dec);\n  result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n  return result;\n}\n\n/**\n *\n *\n * Find the largest font size (in pixels) that allows the string to fit in the given width.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold ?px verdana\")\n *                      -- note the use of ? in place of the font size.\n * @param {width} the width in pixels the string must fit in\n * @param {minFontPx} the smallest acceptable font size in pixels\n * @param {maxFontPx} the largest acceptable font size in pixels\n**/\nfunction getTextSizeForWidth(text: string, font: any, width, minFontPx, maxFontPx) {\n    var s = font.replace(\"?\", maxFontPx);\n    var w = getTextWidth(text, s);\n    if (w <= width) {\n      return maxFontPx;\n    }\n    // pad width by 10px\n    width = width - 20;\n    // start from large to small, return 0 for no-fit\n    for (let fontSize = maxFontPx; fontSize >= minFontPx; fontSize--) {\n      s = font.replace(\"?\", fontSize);\n      w = getTextWidth(text, s);\n      if (w < width) {\n        return Math.ceil(fontSize);\n      }\n    }\n    // 0 if no fit\n    return 0;\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nfunction getTextWidth(text: string, font: string) {\n  // re-use canvas object for better performance\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  context.font = font;\n  var metrics = context.measureText(text);\n  return metrics.width;\n}\n\n\nexport {\nGetDecimalsForValue,\ngetTextSizeForWidth,\ngetTextWidth\n};\n"]}